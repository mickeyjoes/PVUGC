//! Contains the CRS and the functionality a trusted party can use to generate it.
//!
//! The Common Reference String (CRS) for Groth-Sahai consists of a commitment keypair `(u, v)` and
//! the bilinear group generators `(g1, g2, gt)`.
//!
//! - As per [[GSW '10]](https://www.iacr.org/archive/pkc2010/60560179/60560179.pdf), the CRS
//!   should either be generated by a trusted party or through some other form of trusted
//!   computation as a binding key for a real system.
//! - The committment keys `u` and `v` should be computationally indistinguishable
//!   under the SXDH assumption as to whethere they were instantiated as a:
//!    1) Perfect soundness string (i.e. perfectly binding), or
//!    2) Composable witness-indistinguishability string (i.e. perfectly hiding)

use crate::data_structures::{Com1, Com2};

use ark_ec::pairing::{Pairing, PairingOutput};
use ark_ff::{UniformRand, Zero};
use ark_serialize::{CanonicalDeserialize, CanonicalSerialize};
use ark_std::{ops::Mul, rand::Rng};

/// An abstract trait for denoting how to generate a CRS
pub trait AbstractCrs<E: Pairing> {
    /// Generates the keys `u` for committing `G1` and `Fr` to
    /// [`B1`](crate::data_structures::B1) and `v` for committing `G2` and `Fr` to
    /// [`B2`](crate::data_structures::B2).
    fn generate_crs<R>(rng: &mut R) -> Self
    where
        R: Rng;
}

/// Contains the commitment keys and bilinear group generators
#[derive(Clone, Debug, CanonicalSerialize, CanonicalDeserialize)]
pub struct CRS<E: Pairing> {
    pub u: Vec<Com1<E>>,
    pub v: Vec<Com2<E>>,
    pub g1_gen: E::G1Affine,
    pub g2_gen: E::G2Affine,
    pub gt_gen: PairingOutput<E>,
    /// Dual bases for KEM (derived from u, v)
    pub u_dual: Vec<Com2<E>>,  // Dual to u in G2
    pub v_dual: Vec<Com1<E>>,  // Dual to v in G1
}

impl<E: Pairing> CRS<E> {
    // Returns intermediate "second" values that are used to construct un-blinded (i.e. binding) committment keys
    #[inline(always)]
    #[allow(unused_variables)]
    fn prepare_real_binding_key(
        g1_gen: E::G1,
        g2_gen: E::G2,
        q1: E::G1,
        t1: E::ScalarField,
        q2: E::G2,
        t2: E::ScalarField,
    ) -> (E::G1, E::G2) {
        // NOTE: v1 and v2 should be the only difference between a blinding and a hiding key
        let v1 = q1.mul(t1) - E::G1::zero();
        let v2 = q2.mul(t2) - E::G2::zero();
        (v1, v2)
    }

    // Returns intermediate "second" values that are used to construct blinded (i.e. hiding) committment keys
    #[inline(always)]
    #[allow(dead_code)]
    fn prepare_simulated_hinding_key(
        g1_gen: E::G1,
        g2_gen: E::G2,
        q1: E::G1,
        t1: E::ScalarField,
        q2: E::G2,
        t2: E::ScalarField,
    ) -> (E::G1, E::G2) {
        // NOTE: v1 and v2 should be the only difference between a blinding and a hiding key
        let v1 = q1.mul(t1) - g1_gen;
        let v2 = q2.mul(t2) - g2_gen;
        (v1, v2)
    }
}

impl<E: Pairing> AbstractCrs<E> for CRS<E> {
    fn generate_crs<R>(rng: &mut R) -> CRS<E>
    where
        R: Rng,
    {
        use ark_ec::CurveGroup;
        
        // Generators for G1 and G2
        let p1 = E::G1::rand(rng);
        let p2 = E::G2::rand(rng);

        // Scalar intermediate values for binding CRS
        // Ensure non-zero scalars to avoid degenerate keys
        let a1 = loop {
            let val = E::ScalarField::rand(rng);
            if !val.is_zero() { break val; }
        };
        let a2 = loop {
            let val = E::ScalarField::rand(rng);
            if !val.is_zero() { break val; }
        };
        let t1 = loop {
            let val = E::ScalarField::rand(rng);
            if !val.is_zero() { break val; }
        };
        let t2 = loop {
            let val = E::ScalarField::rand(rng);
            if !val.is_zero() { break val; }
        };

        // Projective intermediate values
        let q1 = p1.mul(a1);
        let q2 = p2.mul(a2);
        let u1 = p1.mul(t1);
        let u2 = p2.mul(t2);

        let (v1, v2) = Self::prepare_real_binding_key(p1, p2, q1, t1, q2, t2);

        // B1 commitment key for G1 and Fr
        let u11 = Com1::<E>(p1.into_affine(), q1.into_affine());
        let u12 = Com1::<E>(u1.into_affine(), v1.into_affine());

        // B2 commitment key for G2 and Fr
        let u21 = Com2::<E>(p2.into_affine(), q2.into_affine());
        let u22 = Com2::<E>(u2.into_affine(), v2.into_affine());

        // Compute dual bases for KEM (dual to u and v)
        // For u[j] = (g1^a_j, g1^b_j), dual is u_dual[j] = (g2^{-b_j}, g2^{a_j})
        // We need to extract the exponents from the constructed u, v
        
        // For the standard binding CRS above:
        // u[0] = (p1, q1) where q1 = p1*a1
        // So exponents are (1, a1) relative to base p1
        // u_dual[0] = (p2^{-a1}, p2^1) = (p2*(-a1), p2)
        
        let u_dual_0 = Com2::<E>(
            p2.mul(-a1).into_affine(),
            p2.into_affine()
        );
        
        // u[1] = (u1, v1) where u1 = p1*t1, v1 computed from prepare_real_binding_key
        // For binding: v1 = q1*t1 - 0 = (p1*a1)*t1 = p1*(a1*t1)
        // So u[1] relative to p1 has exponents (t1, a1*t1)
        // u_dual[1] = (p2^{-a1*t1}, p2^{t1})
        
        let u_dual_1 = Com2::<E>(
            p2.mul(-a1 * t1).into_affine(),
            p2.mul(t1).into_affine()
        );
        
        // For v (in G2):
        // v[0] = (p2, q2) where q2 = p2*a2
        // v_dual[0] = (p1^{-a2}, p1^1)
        
        let v_dual_0 = Com1::<E>(
            p1.mul(-a2).into_affine(),
            p1.into_affine()
        );
        
        // v[1] = (u2, v2) where u2 = p2*t2, v2 = q2*t2 = p2*(a2*t2)
        // v_dual[1] = (p1^{-a2*t2}, p1^{t2})
        
        let v_dual_1 = Com1::<E>(
            p1.mul(-a2 * t2).into_affine(),
            p1.mul(t2).into_affine()
        );

        let crs = CRS::<E> {
            u: vec![u11, u12],
            v: vec![u21, u22],
            g1_gen: p1.into_affine(),
            g2_gen: p2.into_affine(),
            gt_gen: E::pairing(p1.into_affine(), p2.into_affine()),
            u_dual: vec![u_dual_0, u_dual_1],
            v_dual: vec![v_dual_0, v_dual_1],
        };

        // Runtime assertions for CRS pair-compatibility
        #[cfg(debug_assertions)]
        {
            use ark_ff::One;
            for j in 0..crs.u.len() {
                let PairingOutput(p0) = E::pairing(crs.u[j].0, crs.u_dual[j].0);
                let PairingOutput(p1) = E::pairing(crs.u[j].1, crs.u_dual[j].1);
                debug_assert_eq!(p0 * p1, E::TargetField::one(), 
                    "CRS u/u_dual pair {} invariant failed", j);
            }
            for k in 0..crs.v.len() {
                let PairingOutput(p0) = E::pairing(crs.v_dual[k].0, crs.v[k].0);
                let PairingOutput(p1) = E::pairing(crs.v_dual[k].1, crs.v[k].1);
                debug_assert_eq!(p0 * p1, E::TargetField::one(), 
                    "CRS v_dual/v pair {} invariant failed", k);
            }
        }

        crs
    }
}

#[cfg(test)]
mod tests {
    use ark_bls12_381::Bls12_381 as F;
    use ark_ec::{pairing::Pairing, AffineRepr, CurveGroup};
    use ark_ff::Zero;
    use ark_std::test_rng;

    use super::*;

    type G1Projective = <F as Pairing>::G1;
    type G1Affine = <F as Pairing>::G1Affine;
    type G2Projective = <F as Pairing>::G2;
    type G2Affine = <F as Pairing>::G2Affine;
    type GT = PairingOutput<F>;
    type Fr = <F as Pairing>::ScalarField;

    #[test]
    fn test_valid_generators() {
        let mut rng = test_rng();

        let crs = CRS::<F>::generate_crs(&mut rng);

        // Generator for GT is e(g1,g2)
        assert_eq!(crs.gt_gen, F::pairing(crs.g1_gen, crs.g2_gen));
        // Non-degeneracy of bilinear pairing will hold
        assert_ne!(crs.g1_gen, G1Affine::zero());
        assert_ne!(crs.g2_gen, G2Affine::zero());
        assert_ne!(crs.gt_gen, GT::zero());
    }

    #[allow(non_snake_case)]
    #[test]
    fn test_valid_binding_CRS() {
        std::env::set_var("DETERMINISTIC_TEST_RNG", "1");
        let mut rng = test_rng();
        let mut rng2 = test_rng();

        let crs = CRS::<F>::generate_crs(&mut rng);

        // Follow the same process as necessary to prepare a binding key
        let p1 = G1Projective::rand(&mut rng2);
        let p2 = G2Projective::rand(&mut rng2);
        let a1 = Fr::rand(&mut rng2);
        let a2 = Fr::rand(&mut rng2);
        let t1 = Fr::rand(&mut rng2);
        let t2 = Fr::rand(&mut rng2);
        let q1 = p1.mul(a1);
        let q2 = p2.mul(a2);
        let (v1, v2) = CRS::<F>::prepare_real_binding_key(p1, p2, q1, t1, q2, t2);

        // Generated commitment keys are non-trivial
        assert_ne!(crs.u[0], Com1::zero());
        assert_ne!(crs.u[1], Com1::zero());
        assert_ne!(crs.v[0], Com2::zero());
        assert_ne!(crs.v[1], Com2::zero());

        // The chosen keys are binding (i.e. not hiding)
        assert_ne!(crs.g1_gen, G1Affine::zero());
        assert_ne!(crs.g2_gen, G2Affine::zero());
        assert_eq!(crs.u[1].1, v1.into_affine());
        assert_eq!(crs.v[1].1, v2.into_affine());
    }

    

    #[allow(non_snake_case)]
    #[test]
    fn test_CRS_serde() {
        let mut rng = test_rng();
        let crs = CRS::<F>::generate_crs(&mut rng);

        let mut c_bytes = Vec::new();
        crs.serialize_compressed(&mut c_bytes).unwrap();
        let crs_deserialized = CRS::<F>::deserialize_compressed(&c_bytes[..]).unwrap();
        assert_eq!(crs.u, crs_deserialized.u);
        assert_eq!(crs.v, crs_deserialized.v);
        assert_eq!(crs.g1_gen, crs_deserialized.g1_gen);
        assert_eq!(crs.g2_gen, crs_deserialized.g2_gen);
        assert_eq!(crs.gt_gen, crs_deserialized.gt_gen);

        let mut u_bytes = Vec::new();
        crs.serialize_uncompressed(&mut u_bytes).unwrap();
        let crs_deserialized = CRS::<F>::deserialize_uncompressed(&u_bytes[..]).unwrap();
        assert_eq!(crs.u, crs_deserialized.u);
        assert_eq!(crs.v, crs_deserialized.v);
        assert_eq!(crs.g1_gen, crs_deserialized.g1_gen);
        assert_eq!(crs.g2_gen, crs_deserialized.g2_gen);
        assert_eq!(crs.gt_gen, crs_deserialized.gt_gen);
    }
}